// GENERATED SOURCE FILE - DO NOT MODIFY
// ---
// This proxy class is generated automatically during the build process based
// on the annotations in another source file. Any changes will be overwritten the
// next time the project is built.
// ---
package com.edifecs.epp.security.handler.rest

import com.edifecs.epp.isc.Args

class __GeneratedProxy__IUserHandler(isc: com.edifecs.epp.isc.Isc, serviceTypeName: java.lang.String) extends IUserHandler {
  def address = isc.getAddressRegistry.getAddressForServiceTypeName(serviceTypeName)
  override def get($arg0: java.lang.String) = throw new java.lang.UnsupportedOperationException("This method cannot be accessed remotely.")
  override def put($arg0: java.lang.String, $arg1: com.edifecs.epp.security.data.User) = throw new java.lang.UnsupportedOperationException("This method cannot be accessed remotely.")
  override def list($arg0: com.edifecs.epp.isc.core.command.Pagination) = throw new java.lang.UnsupportedOperationException("This method cannot be accessed remotely.")
  override def delete($arg0: java.lang.String) = throw new java.lang.UnsupportedOperationException("This method cannot be accessed remotely.")
  override def changePasswordAtFirstLogin(user: com.edifecs.epp.security.data.User, authenticationToken: com.edifecs.epp.security.data.token.UsernamePasswordAuthenticationToken) = isc.sendSync(address, "user.changePasswordAtFirstLogin", Map[String, java.io.Serializable](("user", user), ("authenticationToken", authenticationToken)))
  override def post($arg0: com.edifecs.epp.security.data.User) = throw new java.lang.UnsupportedOperationException("This method cannot be accessed remotely.")
  override def deleteUsers(ids: java.util.ArrayList[java.lang.Long]) = isc.sendSync(address, "user.deleteUsers", Map[String, java.io.Serializable](("ids", ids))).asInstanceOf[Boolean]
  override def deleteUser(id: java.lang.Long) = isc.sendSync(address, "user.deleteUser", Map[String, java.io.Serializable](("id", id))).asInstanceOf[Boolean]
  override def getUserById(id: java.lang.Long) = isc.sendSync(address, "user.getUserById", Map[String, java.io.Serializable](("id", id))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def activateUser(id: java.lang.Long) = isc.sendSync(address, "user.activateUser", Map[String, java.io.Serializable](("id", id))).asInstanceOf[Boolean]
  override def unSuspendUser(id: java.lang.Long) = isc.sendSync(address, "user.unSuspendUser", Map[String, java.io.Serializable](("id", id))).asInstanceOf[Boolean]
  override def createLdapUser(user: com.edifecs.epp.security.data.User, token: com.edifecs.epp.security.data.token.LdapAuthenticationToken, organizationId: java.lang.Long) = isc.sendSync(address, "user.createLdapUser", Map[String, java.io.Serializable](("user", user), ("token", token), ("organizationId", organizationId))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def createCertificateUser(user: com.edifecs.epp.security.data.User, domain: java.lang.String, organization: java.lang.String, certificate: java.lang.String, organizationId: java.lang.Long, username: java.lang.String) = isc.sendSync(address, "user.createCertificateUser", Map[String, java.io.Serializable](("user", user), ("domain", domain), ("organization", organization), ("certificate", certificate), ("organizationId", organizationId), ("username", username))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def updateCertificateTokenForUser(user: com.edifecs.epp.security.data.User, domain: java.lang.String, organization: java.lang.String, certificate: java.lang.String) = isc.sendSync(address, "user.updateCertificateTokenForUser", Map[String, java.io.Serializable](("user", user), ("domain", domain), ("organization", organization), ("certificate", certificate)))
  override def getCredentialForUser(id: java.lang.Long) = isc.sendSync(address, "user.getCredentialForUser", Map[String, java.io.Serializable](("id", id))).asInstanceOf[java.util.List[com.edifecs.epp.security.data.Credential]]
  override def getCredentialForCurrentUser = isc.sendSync(address, "user.getCredentialForCurrentUser", Map.empty[String, java.io.Serializable]).asInstanceOf[java.util.List[com.edifecs.epp.security.data.Credential]]
  override def deactivateUser(id: java.lang.Long) = isc.sendSync(address, "user.deactivateUser", Map[String, java.io.Serializable](("id", id))).asInstanceOf[Boolean]
  override def getUserByUsername(username: java.lang.String) = isc.sendSync(address, "user.getUserByUsername", Map[String, java.io.Serializable](("username", username))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def updateCurrentUser(user: com.edifecs.epp.security.data.User) = isc.sendSync(address, "user.updateCurrentUser", Map[String, java.io.Serializable](("user", user))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def batchImportUsers(users: java.util.ArrayList[java.lang.String]) = isc.sendSync(address, "user.batchImportUsers", Map[String, java.io.Serializable](("users", users)))
  override def validateUsersCSV(inputStream: com.edifecs.epp.isc.stream.MessageStream) = isc.sendSync(address, "user.validateUsersCSV", Map[String, java.io.Serializable](("inputStream", inputStream))).asInstanceOf[java.util.Collection[com.edifecs.epp.security.data.CSVJsonUtil]]
  override def deleteAuthenticationToken(newAuthenticationToken: com.edifecs.epp.security.data.token.IAuthenticationToken) = isc.sendSync(address, "user.deleteAuthenticationToken", Map[String, java.io.Serializable](("newAuthenticationToken", newAuthenticationToken))).asInstanceOf[Boolean]
  override def getUsersForGroup(groupId: java.lang.Long, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUsersForGroup", Map[String, java.io.Serializable](("groupId", groupId), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def updateAuthenticationToken(user: com.edifecs.epp.security.data.User, authenticationToken: com.edifecs.epp.security.data.token.IAuthenticationToken) = isc.sendSync(address, "user.updateAuthenticationToken", Map[String, java.io.Serializable](("user", user), ("authenticationToken", authenticationToken)))
  override def getUsersForRole(roleId: Long, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUsersForRole", Map[String, java.io.Serializable](("roleId", roleId), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def getUserRangeForGroup(groupId: Long, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUserRangeForGroup", Map[String, java.io.Serializable](("groupId", groupId), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def getUsersForOrganization(organizationId: Long, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUsersForOrganization", Map[String, java.io.Serializable](("organizationId", organizationId), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def searchUsersHavingRole(userName: java.lang.String, roleId: Long, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.searchUsersHavingRole", Map[String, java.io.Serializable](("userName", userName), ("roleId", roleId), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def getUsersForPermission(permissionString: java.lang.String, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUsersForPermission", Map[String, java.io.Serializable](("permissionString", permissionString), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def getUserNamesForPermission(permissionString: java.lang.String, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUserNamesForPermission", Map[String, java.io.Serializable](("permissionString", permissionString), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[java.lang.String]]
  override def getLdapUserAttributes(username: java.lang.String, organizationId: java.lang.Long) = isc.sendSync(address, "user.getLdapUserAttributes", Map[String, java.io.Serializable](("username", username), ("organizationId", organizationId))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def importUsersJson(inputStream: java.io.InputStream) = isc.sendSync(address, "user.importUsersJson", Map[String, java.io.Serializable](("inputStream", com.edifecs.epp.isc.stream.MessageStream.fromInputStream(inputStream)))).asInstanceOf[java.lang.String]
  override def validateImportUsers(inputStream: java.io.InputStream) = isc.sendSync(address, "user.validateImportUsers", Map[String, java.io.Serializable](("inputStream", com.edifecs.epp.isc.stream.MessageStream.fromInputStream(inputStream)))).asInstanceOf[java.lang.String]
  override def suspendUser(id: java.lang.Long) = isc.sendSync(address, "user.suspendUser", Map[String, java.io.Serializable](("id", id))).asInstanceOf[Boolean]
  override def createUser(user: com.edifecs.epp.security.data.User, token: com.edifecs.epp.security.data.token.UsernamePasswordAuthenticationToken, organizationId: java.lang.Long) = isc.sendSync(address, "user.createUser", Map[String, java.io.Serializable](("user", user), ("token", token), ("organizationId", organizationId))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def addUsernamePasswordAuthenticationTokenToUser(user: com.edifecs.epp.security.data.User, authenticationToken: com.edifecs.epp.security.data.token.UsernamePasswordAuthenticationToken) = isc.sendSync(address, "user.addUsernamePasswordAuthenticationTokenToUser", Map[String, java.io.Serializable](("user", user), ("authenticationToken", authenticationToken)))
  override def updateUsernamePasswordAuthenticationToken(user: com.edifecs.epp.security.data.User, authenticationToken: com.edifecs.epp.security.data.token.UsernamePasswordAuthenticationToken) = isc.sendSync(address, "user.updateUsernamePasswordAuthenticationToken", Map[String, java.io.Serializable](("user", user), ("authenticationToken", authenticationToken)))
  override def updateCurrentUserAuthenticationToken(authenticationToken: com.edifecs.epp.security.data.token.UsernamePasswordAuthenticationToken) = isc.sendSync(address, "user.updateCurrentUserAuthenticationToken", Map[String, java.io.Serializable](("authenticationToken", authenticationToken)))
  override def searchByFirstOrMiddleOrLastName(seed: java.lang.String, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.searchByFirstOrMiddleOrLastName", Map[String, java.io.Serializable](("seed", seed), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[java.util.Collection[com.edifecs.epp.security.data.User]]
  override def getUsers(startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.getUsers", Map[String, java.io.Serializable](("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def updateUser(user: com.edifecs.epp.security.data.User) = isc.sendSync(address, "user.updateUser", Map[String, java.io.Serializable](("user", user))).asInstanceOf[com.edifecs.epp.security.data.User]
  override def searchUsers(userName: java.lang.String, startRecord: Long, recordCount: Long) = isc.sendSync(address, "user.searchUsers", Map[String, java.io.Serializable](("userName", userName), ("startRecord", startRecord), ("recordCount", recordCount))).asInstanceOf[com.edifecs.epp.security.data.PaginatedList[com.edifecs.epp.security.data.User]]
  override def matchPattern(regex: java.lang.String, seed: java.lang.String) = isc.sendSync(address, "user.matchPattern", Map[String, java.io.Serializable](("regex", regex), ("seed", seed))).asInstanceOf[Boolean]
  override def restCommand($2dx$2drest$2dmethod: java.lang.String, $2dx$2durl$2dsuffix: java.lang.String, $2dx$2drequest$2dbody: com.edifecs.epp.isc.json.JsonArg, page: java.lang.Long, start: java.lang.Long, limit: java.lang.Long, query: java.lang.String, sort: java.lang.String, filter: java.lang.String) = isc.sendSync(address, "user", Map[String, java.io.Serializable](("-x-rest-method", $2dx$2drest$2dmethod), ("-x-url-suffix", $2dx$2durl$2dsuffix), ("-x-request-body", $2dx$2drequest$2dbody), ("page", page), ("start", start), ("limit", limit), ("query", query), ("sort", sort), ("filter", filter))).asInstanceOf[java.io.Serializable]
}