
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = WARNING
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  remote.netty.tcp {
    # Listen Port Address for Communication Protocol [TCP: 7800]
    # Default listening port if not specified #listen.port
    port = 7800

    # Sets the send buffer size of the Sockets,
    # set to 0b for platform default
    send-buffer-size = 512kB

    # Sets the receive buffer size of the Sockets,
    # set to 0b for platform default
    receive-buffer-size = 512kB

    # Maximum message size the transport will accept, but at least
    # 32000 bytes.
    # Please note that UDP does not support arbitrary large datagrams,
    # so this setting has to be chosen carefully when using UDP.
    # Both send-buffer-size and receive-buffer-size settings has to
    # be adjusted to be able to buffer messages of maximum size.
    maximum-frame-size = 2048kB
  }

  # Possibility to turn off logging of dead letters while the actor system
  # is shutting down. Logging is only done when enabled by 'log-dead-letters'
  # setting.
  log-dead-letters-during-shutdown = off
  log-dead-letters = off
}

isc {
  # Name of the cluster to connect to.
  # This is a required field and cannot be left blank.
  cluster.name = ""

  messaging {
    async-timeout = 5m
    sync-timeout = 5m
    stream {
      chunk-timeout = 10s

      # Streams will expire if not read for this amount of time after creation.
      expire-timeout = 5 minutes

      # Chunk size can drastically affect streaming performance; larger is usually better.
      chunk-size = 128kB

      # The maximum number of chunks per stream that can be cached in memory at one time.
      chunk-cache-size = 32
    }
  }

  node.jvm.opts = "-Djava.net.preferIPv4Stack=true;-Xms2024M;-Xmx4096M;-XX:MaxPermSize=256M"

  # Default Metric Reporter
  # type: csv, console | period: reporting interval
  # type: zabbix | host: server host name, e.g., example.com | port: server port: 10051
  # type: jmx
  metric.reporter {
   type = csv
   data-directory = "../log/metric"

   # period = 1 hour
   # username="admin"
   # password="zabbix"

   # type = "zabbix"
   # host = "10.30.50.106"
   # group = "SM"
   # port = 10051
  }
}

spray.can {
  server {
    # the time after which an idle connection will be automatically closed
    # Set to zero to completely disable idle connection timeouts.
    idle-timeout = 120 s

    # If a request hasn't been responded to after the time period set here
    # a spray.http.Timeout message will be sent to the timeout handler.
    # Set to zero to completely disable request timeouts.
    request-timeout = 30 s

    # After a Timeout message has been sent to the timeout handler and the
    # request still hasn't been completed after the time period set here
    # the server will complete the request itself with an error response.
    # Set to zero to disable timeout timeouts.
    timeout-timeout = 500 ms

    # If this setting is non-zero the HTTP server automatically aggregates
    # incoming request chunks into full HttpRequests before dispatching them to
    # the application. If the size of the aggregated requests surpasses the
    # specified limit the server responds with a `413 Request Entity Too Large`
    # error response before closing the connection.
    # Set to zero to disable automatic request chunk aggregation and have
    # ChunkedRequestStart, MessageChunk and ChunkedMessageEnd messages be
    # dispatched to the handler.
    request-chunk-aggregation-limit = 0

    # The configuration of the HTTP message parser for the server and
    # the client.
    parsing {
      # The limits for the various parts of the HTTP message parser.
      max-uri-length             = 2k
      max-response-reason-length = 64
      max-header-name-length     = 64
      max-header-value-length    = 8k
      max-header-count           = 64
      max-content-length         = 100m
      max-chunk-ext-length       = 256
      max-chunk-size             = 1m

      # Sets the size starting from which incoming http-messages will be delivered
      # in chunks regardless of whether chunking is actually used on the wire.
      # Set to infinite to disable auto chunking.
      incoming-auto-chunking-threshold-size = 256kB
    }
  }
}

sm {
  # How long to wait before force closing Nodes
  shutdown.timeout = 10 seconds

  # How long to wait for the core services to startup
  startup.timeout = 10 minutes
}

# Set the static content provider path like c:\\temp\\uidev and context path = uidev
# and open the browser to see http://localhost:8080/uidev
# Example:
#
# dev {
#   static.content.provider {
#     somecontextpath = "C:/path/to/some/dir",
#     sample = "C:/someapplication/html/path"
#   }
# }