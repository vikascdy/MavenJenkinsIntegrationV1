 -----
 Metric Module
 -----
 William Clements
 -----
 2/12/2014
 -----
 
Metric Module

*What is the Metric Module?
  
  Metrics and health of a component are collected for many reasons within a cluster. What is needed is the ability to expose metrics for collection by a analytic and display tool like Zabbix or Graphite.
  
  <<Types of Metrics:>>
  
  * <<Gauge>>
  
    A gauge is an instantaneous measurement of a value. For example, we may want to measure the number of pending jobs in a queue.
  
  * <<Meter>>
  
    A meter measures the rate of events over time (e.g., “requests per second”). In addition to the mean rate, meters also track 1-, 5-, and 15-minute moving averages.
  
  * <<Counters>>
  
    A counter is just a gauge for an AtomicLong instance. You can increment or decrement its value. For example, we may want a more efficient way of measuring the pending job in a queue.
  
  * <<Timer>>
  
    A timer measures both the rate that a particular piece of code is called and the distribution of its duration.
  
  * <<Histogram>>
  
    A histogram measures the statistical distribution of values in a stream of data. In addition to minimum, maximum, mean, etc., it also measures median, 75th, 90th, 95th, 98th, 99th, and 99.9th percentiles.
  
  * <<Health Checks>>
  
    Centralize your service’s health checks.
  
**Why do we need it?

  Metrics once collected are used for load balancing, auto deployment, scalability, and billing. Metrics are what give visability into an activly running system to monitor performance and be able to wire in and act based on the metrics.
  
  When it comes to following the concepts of Infostructure as code, and for billing companies, it becomes a critical component.
  
**How are we Solving the Problem?

  There are many types of metrics and many components and objects within a cluster need to expose these for a variety of reasons:
  
    * {{{./users_of_metric_module.html}Users of Metrics}}
   
  The ability to expose metrics are done through our Metric Client API which leverages the CodaHale project to help manage the collection and distribution of the metrics.

[./puml/metric_architecture.png]
  
  There are many points where the metrics can be automatically exposed for collection due to the nature of our shared libraries.

  * <<System and Process Performance Monitoring>>
 
    System level Performance monitoring is the hardware and OS level collection of metrics. CPU, Memory, Disk IO, Network Utalization metrics are collected at the system level, as well as the process level. This is all collected by the PaaS layer.
 
  * <<Service Command Metric Collection>>
 
    Two metrics are auto collected for commands, latency and throughput. If a service needs to collect additional metrics, annotations or an API Can be used to collect the information.
    
    To collect calls in context of a user or tenant, its collected from the JSON Servlet from the incoming Rest Requests. This is a checkpoint to allow throttling customer calls based on the number of calls and their SLA.
 
    Annotations can be added to help control how metrics are defined and collected.
 
  * <<Exception and Failure Metrics>>
  
    If the command model is followed, exception information and exception data is collected by the metric and monitoring modules.
    
  * <<Pub/Sub>>
  
    The Pub Sub module auto collects usage statistics and processing statistics.

**SLA's and Service Guarantees

  The collection of metrics only helps give visibility into the metrics, however in order to act on these metrics, SLA's need to be defined and exposed too the auto scaler solution.
  
  {{{./metric_sla.html}Further Information}}
    
**Usage

  To expose a metric to be collected (that is not already collected) there are a couple ways:
  
    * Annotation Driven
    
    * API to register attributes or methods to be monitored
    
  Examples can be found here:
    
  {{{metric_usage.html}How to Expose a Metric and SLA}}

*Categories of Metrics

  Metrics come in a variety of categories. They can be used for performance and health monitoring, as well as business needs such as billing.

[./image/monitoring_mindmap.png]

*Resources

  * {{http://metrics.codahale.com/}}
  
  * {{http://www.zabbix.com/}}
  
  * {{http://graphite.wikidot.com/}}
