<config
    xmlns="urn:org:jgroups"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/com.edifecs.epp.isc.annotations.JGroups-3.0.xsd">

    <!-- This is the transport protocol. It uses IP multicasting to send messages to the entire cluster, or individual nodes. Other 
        transports include TCP, TCP_NIO and TUNNEL. -->
    <UDP
        mcast_port="${jgroups.udp.mcast_port:45588}"
        tos="8"
        ucast_recv_buf_size="20M"
        ucast_send_buf_size="640K"
        mcast_recv_buf_size="25M"
        mcast_send_buf_size="640K"
        loopback="true"
        discard_incompatible_packets="true"
        max_bundle_size="64K"
        max_bundle_timeout="30"
        ip_ttl="${jgroups.udp.ip_ttl:2}"
        enable_bundling="true"
        enable_diagnostics="true"
        thread_naming_pattern="cl"
        timer_type="new"
        timer.min_threads="4"
        timer.max_threads="10"
        timer.keep_alive_time="3000"
        timer.queue_max_size="500"
        thread_pool.enabled="true"
        thread_pool.min_threads="2"
        thread_pool.max_threads="8"
        thread_pool.keep_alive_time="5000"
        thread_pool.queue_enabled="true"
        thread_pool.queue_max_size="10000"
        thread_pool.rejection_policy="discard"
        log_discard_msgs="false"
        oob_thread_pool.enabled="true"
        oob_thread_pool.min_threads="1"
        oob_thread_pool.max_threads="8"
        oob_thread_pool.keep_alive_time="5000"
        oob_thread_pool.queue_enabled="false"
        oob_thread_pool.queue_max_size="100"
        oob_thread_pool.rejection_policy="Run" />

    <!-- Uses IP multicast (by default) to find initial members. Once found, the current coordinator can be determined and a unicast 
        JOIN request will be sent to it in order to join the cluster. -->
    <PING
        timeout="2000"
        num_initial_members="3" />

    <!-- Will merge subgroups back into one group, kicks in after a cluster partition. -->
    <MERGE2
        max_interval="30000"
        min_interval="10000" />

    <!-- Failure detection based on sockets (in a ring form between members). Generates notification if a member fails -->
    <FD_SOCK />

    <FD_ALL />

    <VERIFY_SUSPECT timeout="1500" />

    <BARRIER />

    <pbcast.NAKACK
        exponential_backoff="0"
        use_mcast_xmit="true"
        retransmit_timeout="300,600,1200"
        discard_delivered_msgs="true" />
        
	<COMPRESS min_size="500" compression_level="9" /> 
	
    <UNICAST />
    
    <pbcast.STABLE
        stability_delay="1000"
        desired_avg_gossip="50000"
        max_bytes="4M" />
    <pbcast.GMS
        print_local_addr="true"
        join_timeout="3000"
        view_bundling="true" />
    <UFC
        max_credits="2M"
        min_threshold="0.4" />
    <MFC
        max_credits="2M"
        min_threshold="0.4" />


    <!-- FRAG and FRAG2 fragment large messages into smaller ones, send the smaller ones, and at the receiver side, the smaller fragments 
        will get assembled into larger messages again, and delivered to the application. FRAG and FRAG2 work for both unicast and multicast 
        messages. The difference between FRAG and FRAG2 is that FRAG2 does 1 less copy than FRAG, so it is the recommended fragmentation protocol. 
        FRAG serializes a message to know the exact size required (including headers), whereas FRAG2 only fragments the payload (excluding 
        the headers), so it is faster. The properties of FRAG2 are: TableÂ 7.30.Â Properties Name Description frag_size The max number of bytes 
        in a message. Larger messages will be fragmented Contrary to FRAG, FRAG2 does not need to serialize a message in order to break it 
        into smaller fragments: it looks only at the message's buffer, which is a byte array anyway. We assume that the size addition for headers 
        and src and dest addresses is minimal when the transport finally has to serialize the message, so we add a constant (by default 200 
        bytes). Because of the efficiency gained by not having to serialize the message just to determine its size, FRAG2 is generally recommended 
        over FRAG. -->
    <FRAG2 frag_size="60k" />


</config>
